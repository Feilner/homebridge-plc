{
  "pluginAlias": "PLC",
  "pluginType": "platform",
  "singular": true,
  "schema": {
    "type": "object",
    "properties": {
      "ip": {
        "title": "IPv4 address of the PLC",
        "type": "string",
        "default": "192.168.1.100",
        "format": "ipv4",
        "required": true
      },
      "rack": {
        "title": "Rack number of the PLC",
        "description": "typically 0",
        "type": "integer",
        "default": 0,
        "minimum": 0,
        "required": true
      },
      "slot": {
        "title": "Slot number of the PLC",
        "description": "for S7 300/400 typically 2, for 1200/1500 typically 1",
        "type": "integer",
        "default": 2,
        "minimum": 0,
        "required": true
      },
      "communicationOP": {
        "title": "Use OP-Communication instead of default PG-Communication",
        "description": "On some PLCs the number of PG connections is limited so it could make sense to switch to OP.",
        "type": "boolean",
        "placeholder": false
      },
      "enablePolling": {
        "title": "Enable polling",
        "description": "When enabled a background task is executed every second enable polling for the accessories",
        "type": "boolean",
        "placeholder": false
      },
      "defaultPollInterval": {
        "title": "Default polling interval in seconds",
        "description": "This defines the default polling interval when no interval is set per accessory",
        "type": "int",
        "minimum": 1,
        "placeholder": 10
      },
      "distributePolling": {
        "title": "Distribute polling",
        "description": "When enabled he polling of the accessories does not start at the same time. In order to distribute the PLC load for the queries.",
        "type": "boolean",
        "placeholder": false
      },
      "enablePush": {
        "title": "Enable push server",
        "description": "When enabled a http server is started to receive push updates of values form PLC. The PLC has send an http request <br>e.g: 'http://homebridgeIp:8888/?push&db=6096&offset=1.1&value=1'",
        "type": "boolean",
        "placeholder": false
      },
      "enableControl": {
        "title": "Enable control server",
        "description": "When enabled a http server is started to allow control accessories by http. <br>e.g.: 'http://homebridgeIp:8888/?control&db=1014&offset=1&value=3'",
        "type": "boolean",
        "placeholder": false
      },
      "port": {
        "title": "Port for server",
        "description": "Port for http server to handle incoming http requests for push and control functionality. Default port is 8888",
        "type": "int",
        "minimum": 1,
        "placeholder": 8888
      },
      "forward": {
        "title": "Enable Forward of push and control requests",
        "description": "There is a limit of maximum 149 supported accessories by homebridge. To overcome this is limited you can create a second instance of homebridge running homebridge-plc and forward all push and control with no matching db to the other instance. Set the destination address of the second instance e.g. http:\\127.0.0.1:8889",
        "type": "boolean",
        "placeholder": false
      },
      "mirror": {
        "title": "Mirror readings and push requests from PLC",
        "description": "There are environments where it could make sense to share the same accessories on two homebridge instances. To allow pairing with another Home with Apple Home App or Home Assistant. This option mirrors all values read from PLC by this instance to a second instance. It also forwards all push requests to the second instance. The option enablePush has to be enabled on the second instance. on the destination instance. Set the destination address of the second instance e.g. http:\\192.168.1.11:8888. (expirimental feature)",
        "type": "boolean",
        "placeholder": false
      },


      "accessories": {
        "type": "array",
        "items": {
          "title": "Accessory",
          "type": "object",
          "properties": {
            "accessory" : {
              "title": "PLC Accessory",
              "type": "string",
              "required": true,
              "default": "PLC_Dummy",

              "oneOf": [
                {
                  "title": "Select...",
                  "enum": ["PLC_Dummy"]
                },
                {
                  "title": "PLC_LightBulb",
                  "enum": ["PLC_LightBulb"]
                },
                {
                  "title": "PLC_Outlet",
                  "enum": ["PLC_Outlet"]
                },
                {
                  "title": "PLC_Switch",
                  "enum": ["PLC_Switch"]
                },
                {
                  "title": "PLC_TemperatureSensor",
                  "enum": ["PLC_TemperatureSensor"]
                },
                {
                  "title": "PLC_HumiditySensor",
                  "enum": ["PLC_HumiditySensor"]
                },
                {
                  "title": "PLC_Thermostat",
                  "enum": ["PLC_Thermostat"]
                },
                {
                  "title": "PLC_HumidifierDehumidifier",
                  "enum": ["PLC_HumidifierDehumidifier"]
                },
                {
                  "title": "PLC_WindowCovering",
                  "enum": ["PLC_WindowCovering"]
                },
                {
                  "title": "PLC_Window",
                  "enum": ["PLC_Window"]
                },
                {
                  "title": "PLC_Door",
                  "enum": ["PLC_Door"]
                },
                {
                  "title": "PLC_OccupancySensor",
                  "enum": ["PLC_OccupancySensor"]
                },
                {
                  "title": "PLC_MotionSensor",
                  "enum": ["PLC_MotionSensor"]
                },
                {
                  "title": "PLC_ContactSensor",
                  "enum": ["PLC_ContactSensor"]
                },
                {
                  "title": "PLC_LeakSensor",
                  "enum": ["PLC_LeakSensor"]
                },
                {
                  "title": "PLC_Faucet",
                  "enum": ["PLC_Faucet"]
                },
                {
                  "title": "PLC_Valve",
                  "enum": ["PLC_Valve"]
                },
                {
                  "title": "PLC_SecuritySystem",
                  "enum": ["PLC_SecuritySystem"]
                },
                {
                  "title": "PLC_StatelessProgrammableSwitch",
                  "enum": ["PLC_StatelessProgrammableSwitch"]
                },
                {
                  "title": "PLC_Doorbell",
                  "enum": ["PLC_Doorbell"]
                },
                {
                  "title": "PLC_LockMechanism",
                  "enum": ["PLC_LockMechanism"]
                },
                {
                  "title": "PLC_LockMechanismBool",
                  "enum": ["PLC_LockMechanismBool"]
                },
                {
                  "title": "PLC_GarageDoorOpener",
                  "enum": ["PLC_GarageDoorOpener"]
                },
                {
                  "title": "PLC_SmokeSensor",
                  "enum": ["PLC_SmokeSensor"]
                },
                {
                  "title": "PLC_Fan",
                  "enum": ["PLC_Fan"]
                },
                {
                  "title": "PLC_LightSensor",
                  "enum": ["PLC_LightSensor"]
                },
                {
                  "title": "PLC_LightSensor_DInt",
                  "enum": ["PLC_LightSensor_DInt"]
                },
                {
                  "title": "PLC_AirPurifier",
                  "enum": ["PLC_AirPurifier"]                  
                },
                {
                  "title": "PLC_FilterMaintenance",
                  "enum": ["PLC_FilterMaintenance"]                  
                }
                ]
            },
            "name": {
              "title": "Name",
              "type": "string",
              "required": true,
              "description": "Define the uniqe name for the accessory.",
              "placeholder": "Enter uniqe name..."
            },
            "db": {
              "title": " s7 data base number e.g. 4 for DB4",
              "type": "integer",
              "minimum" : 1,
              "required": true
            },
            "manufacturer": {
              "title": "Manufacturer",
              "type": "string",
              "placeholder": "Homebridge",
              "description": "Set the manufacturer name for display in the Home app."
            },
            "enablePolling": {
              "title": "Enable polling",
              "description": "Has only effect when polling is enabled on platform level.",
              "type": "boolean",
              "placeholder": false
            },
            "pollInterval": {
               "title": "Polling interval in seconds",
              "description": "Overwrites platform defined default polling interval",
              "type": "integer",
              "minimum": 1,
              "placeholder": 10
            },
            "adaptivePolling": {
              "title": "adaptive Polling **(optional)**",
              "description": "When set to `true` the current position will be polled until target position is reached. Polling starts with set target position from home app. This allows to show the shutter as opening... or closing... in the home app during movement.",
              "type": "boolean",
              "placeholder": false,
              "condition": {
                "functionBody": "return ['PLC_WindowCovering','PLC_Window','PLC_Door'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            "adaptivePollingInterval": {
               "title": "adaptivePollingInterval **(optional)**",
              "description": "**(optional)** poll interval in seconds during high frequency polling. Default value is `1` second.",
              "type": "integer",
              "minimum": 1,
              "placeholder": 1,
              "condition": {
                "functionBody": "return ['PLC_WindowCovering','PLC_Window','PLC_Door'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },

            "get_On": {
              "title": "get_On **(push support)**",
              "type": "number",
              "description": "offset and bit to read current on/off state from PLC. S7 type Bool e.g. 55.1",
              "required": true
            },
            "set_On": {
              "title": "Single Bit mode: offset set_On **(control support)**",
              "type": "number",
              "description": "Single Bit mode: offset and bit to set to 1/0 to PLC when switching on/off S7 type Bool PLC e.g. 55.1 for DB4DBX55.1 could be same as get_On.",
              "required": true,
              "condition": {
                "functionBody": "return (!model.accessories[arrayIndices[0]].set_On_Set && !model.accessories[arrayIndices[0]].set_On_Reset);"
              }
            },
            "set_On_Set": {
              "title": "Separate Bits mode: set_On_Set **(control support)**",
              "type": "number",
              "description": "Separate Bits mode: offset and bit set to 1 when switching off. PLC has to set to 0 S7 type Bool e.g. 55.2",
              "required": true,
              "condition": {
                "functionBody": "return (!model.accessories[arrayIndices[0]].set_On);"
              }
            },
            "set_On_Reset": {
              "title": "Separate Bits mode: offset set_On_Reset",
              "type": "number",
              "description": "Separate Bits mode: offset and bit set to 1 when switching off. PLC has to set to 0 S7 type Bool e.g. 55.3 <br>NOTE: When defining this the behaviour of set_On changes to Seperate Bit mode.",
              "required": true,
              "condition": {
                "functionBody": "return (!model.accessories[arrayIndices[0]].set_On);"
              }
            },
            "get_Active": {
              "title": "get_Active **(push support)**",
              "type": "number",
              "description": "offset and bit get the current status S7 type `Bool` e.g. `55.0` for `DB4DBX55.0`",
              "condition": {
                "functionBody": "return (!model.accessories[arrayIndices[0]].set_Active_Set && !model.accessories[arrayIndices[0]].set_Active_Reset);"
              }
            },
            "set_Active": {
              "title": "Single Bit mode: offset set_Active (bool) **(control support)**",
              "type": "number",
              "description": "Single Bit mode: offset and bit to set to 1/0 to PLC when switching on/off S7 type Bool PLC e.g. 55.1 for DB4DBX55.1 could be same as get_Active <br>Separate Bits mode: offset and bit set to 1 when switching off. PLC has to set to 0 S7 type Bool e.g. 55.2",
              "condition": {
                "functionBody": "return (!model.accessories[arrayIndices[0]].set_Active_Set && !model.accessories[arrayIndices[0]].set_Active_Reset);"
              }
            },
            "set_Active_Set": {
              "title": "Separate Bits mode: offset set_Active_Set **(control support)**",
              "type": "number",
              "description": "Separate Bits mode: offset and bit set to 1 when switching off. PLC has to set to 0 S7 type Bool e.g. 55.2",
              "condition": {
                "functionBody": "return (!model.accessories[arrayIndices[0]].set_Active);"
              }
            },
            "set_Active_Reset": {
              "title": "Separate Bits mode: offset set_Active_Reset",
              "type": "number",
              "description": "Separate Bits mode: offset and bit set to 1 when switching off. PLC has to set to 0 S7 type Bool e.g. 55.3 <br>NOTE: When defining this the behaviour of set_Active changes to Seperate Bit mode.",
              "condition": {
                "functionBody": "return (!model.accessories[arrayIndices[0]].set_Active);"
              }
            },
            "get_Brightness": {
              "title": "get_Brightness (byte)",
              "type": "number",
              "description": "get brightness value S7 type Byte e.g. 56 for DB4DBB56"
            },
            "set_Brightness": {
              "title": "set_Brightness (byte)",
              "type": "number",
              "description": "set brightness value S7 type Byte e.g. 57 for DB4DBB57"
            },
            "minTemperatureValue": {
              "title": "minTemperatureValue",
              "type": "number",
              "placeholder": -270
            },
            "maxTemperatureValue": {
              "title": "maxTemperatureValue",
              "type": "number",
              "placeholder": 100
            },
            "minTemperatureStep": {
              "title": "minTemperatureStep",
              "type": "number",
              "placeholder": 0.1
            },
            "minHumidityValue": {
              "title": "minHumidityValue",
              "type": "number",
              "placeholder": 0
            },
            "maxHumidityValue": {
              "title": "maxHumidityValue",
              "type": "number",
              "placeholder": 100
            },
            "minHumidityStep": {
              "title": "minHumidityStep",
              "type": "number",
              "placeholder": 1
            },
            "minTargetTemperatureValue": {
              "title": "minTargetTemperatureValue",
              "type": "number",
              "placeholder": 10
            },
            "maxTargetTemperatureValue": {
              "title": "maxTargetTemperatureValue",
              "type": "number",
              "placeholder": 38
            },
            "minTargetTemperatureStep": {
              "title": "minTargetTemperatureStep",
              "type": "number",
              "placeholder": 0.1
            },
            "mapGetCurrentHeatingCoolingState": {
              "title": "mapGetCurrentHeatingCoolingState **(optional)**",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "description": "define mapping array for `get_CurrentHeatingCoolingState`. The PLC value is used as index into the table. e.g. `[0, 2]` which maps the PLC value `0->0 1->2` when the PLC supports only two states with `0:inactive` and `1:cooling`."
            },
            "mapSetTargetHeatingCoolingState": {
              "title": "mapSetTargetHeatingCoolingState **(optional)**",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "description": "define mapping array for `set_TargetHeatingCoolingState`. The home app value is used as index into the table. e.g. `[0, 1, 0, 3]` which maps the PLC value `0->0 1->1 2->0, 3->3` when the PLC supports only two states with `0:off` and `1:heat` and `3:automatic`. The state cool is mapped to off."
            },
            "mapGetTargetHeatingCoolingState": {
              "title": "mapGetTargetHeatingCoolingState **(optional)**",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "description": "define mapping array for `get_TargetHeatingCoolingState`. The PLC value is used as index into the table. e.g. `[0, 3]` which maps the PLC value `0->0 1->3` when the PLC supports only two states with `0:off` and `1:automatic`."
            },            
            "minTargetHumidityValue": {
              "title": "minTargetHumidityValue",
              "type": "number",
              "placeholder": 0
            },
            "maxTargetHumidityValue": {
              "title": "maxTargetHumidityValue",
              "type": "number",
              "placeholder": 100
            },
            "minTargetHumidityStep": {
              "title": "minTargetHumidityStep",
              "type": "number",
              "placeholder": 1
            },
            "minBrightnessValue": {
              "title": "minBrightnessValue",
              "type": "number",
              "placeholder": 0
            },
            "maxBrightnessValue": {
              "title": "maxBrightnessValue",
              "type": "number",
              "placeholder": 100
            },
            "minBrightnessStep": {
              "title": "minBrightnessStep",
              "type": "number",
              "placeholder": 1
            },
            "get_CurrentTemperature": {
              "title": "get_CurrentTemperature **(push support)**",
              "type": "number",
              "description": "offset to get current temperature S7 type Real e.g. 55 for DB4DBD55"
            },
            "get_CurrentRelativeHumidity": {
              "title": "get_CurrentRelativeHumidity **(push support)**",
              "type": "number",
              "description": "offset to get current humidity S7 type Real e.g. 55 for DB4DBD55"
            },
            "get_TargetTemperature": {
              "title": "get_TargetTemperature **(push support)**",
              "type": "number",
              "description": "offset to get target temperature S7 type `Real` e.g. `4` for `DB4DBD4`"
            },
            "set_TargetTemperature": {
              "title": "get_TargetTemperature **(control support)*",
              "type": "number",
              "description": "offset to set current temperature S7 type `Real` e.g. `4` for `DB4DBD4` (can have same value as get_TargetTemperature)"
            },
            "get_TargetRelativeHumidity": {
              "title": "get_TargetRelativeHumidity **(push support)**",
              "type": "number",
              "description": "offset to get target temperature S7 type `Real` e.g. `4` for `DB4DBD4`"
            },
            "set_TargetRelativeHumidity": {
              "title": "get_TargetTemperature **(control support)**",
              "type": "number",
              "description": "offset to set current temperature S7 type `Real` e.g. `4` for `DB4DBD4` (can have same value as get_TargetTemperature)"
            },
            "get_CurrentHeatingCoolingState": {
              "title": "get_CurrentHeatingCoolingState **(push support)**",
              "type": "number",
              "description": "offset to get current heating/cooling state S7 type `Byte` e.g. `8` for `DB4DBB8`. When not defined fixed `1`: heating is used.<br>- `0`: inactive (shown as green in home app)<br>- `1`: heating (shown as orange in home app)<br>- `2`: cooling (shown as blue in home app)"
            },
            "get_TargetHeatingCoolingState": {
              "title": "get_TargetHeatingCoolingState **(push support)**",
              "type": "number",
              "description": "offset to get target heating/cooling state. S7 type `Byte` e.g. `9` for `DB4DBB9`. When not defined fixed `3`: automatic is used.<br>- `0`: off<br>- `1`: heat<br>- `2`: cool<br>- `3`: automatic"
            },
            "set_TargetHeatingCoolingState": {
              "title": "set_TargetHeatingCoolingState **(control support)**",
              "type": "number",
              "description": "offset to set target heating/cooling state. Can be identical with `get_TargetHeatingCoolingState`. Has to be defined when `get_TargetHeatingCoolingState` is defined. When not defined writes changes are ignored. S7 type `Byte` e.g. `9` for `DB4DBB9`.<br>- `0`: off<br>- `1`: heat<br>- `2`: cool<br>- `3`: automatic"
            },
            "get_CurrentHumidifierDehumidifierState": {
              "title": "get_CurrentHumidifierDehumidifierState **(optional)** **(push support)**",
              "type": "number",
              "description": "offset to get current state. Default value `1:idle`. S7 type `Byte` e.g. `55` for `DB4DBD55` <br>- `0`: inactive <br>- `1`: idle <br>- `2`: humidifying <br>- `3`: dehumidifying"
            },
            "mapGetCurrentHumidifierDehumidifierState **(optional)**": {
              "title": "mapGetCurrentHumidifierDehumidifierState **(optional)**",
              "type": "array",
              "description": "define mapping array for `get_CurrentHumidifierDehumidifierState`. The PLC value is used as index into the table. e.g. `[1, 3]` which maps the PLC value `0->1 1->3` when the PLC supports only two states with `0:idle` and `1:dehumidifying`."
            },
            "default_TargetHumidifierDehumidifierState": {
              "title": "default TargetHumidifierDehumidifierState **(optional)**",
              "type": "number",
              "description": "defines alternative value thats returned then `get_TargetHumidifierDehumidifierState` is not defined. Default value `0:auto`<br>- `0`: auto (humidifier or dehumidifier)<br>- `1`: humidifier<br>- `2`: dehumidifier"
            },
            "get_TargetHumidifierDehumidifierState": {
              "title": "get_TargetHumidifierDehumidifierState **(optional)** **(push support)**",
              "type": "number",
              "description": " offset to get current target state S7 type `Byte` e.g. `55` for `DB4DBD55`<br>- `0`: auto (humidifier or dehumidifier)<br>- `1`: humidifier<br>- `2`: dehumidifier"
            },
            "set_TargetHumidifierDehumidifierState": {
              "title": "set_TargetHeatingCoolingState **(optional)** **(control support)**",
              "type": "number",
              "description": "*offset to set current target state. Needs to be defined when `get_TargetHumidifierDehumidifierState` is set  S7 type `Byte` e.g. `55` for `DB4DBD55`<br>- `0`: auto (humidifier or dehumidifier)<br>- `1`: humidifier<br>- `2`: dehumidifier"
            },
            "mapGetTargetHumidifierDehumidifierState **(optional)**": {
              "title": "mapGetTargetHumidifierDehumidifierState",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "description": "**(optional)** define mapping array for `get_TargetHumidifierDehumidifierState`. The PLC value is used as index into the table. e.g. `[2,1]` which maps the PLC value `0->1 1->2` when the PLC supports only one states with `0:dehumidifier 1:humidifier."
            },
            "mapSetTargetHumidifierDehumidifierState": {
              "title": "mapSetTargetHumidifierDehumidifierState **(optional)**",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "description": "define mapping array for `set_TargetHumidifierDehumidifierState`. The home app value is used as index into the table. e.g. `[2, 2, 2] writes always the value 2 to the plc regardless whats set in the home app"
            },
            "get_SwingMode": {
              "title": "get_SwingMode **(optional)** **(push support)**",
              "type": "number",
              "description": "offset to get swing mode. S7 type `byte` e.g. `8` for `DB4DBB8`.<br>- `0`: swing disabled<br>- `1`: swing enabled"
            },
            "set_SwingMode": {
              "title": "set_SwingMode **(optional but required when `get_SwingMode` is defined)** **(push support)**",
              "type": "number",
              "description": "offset to set swing mode. S7 type `byte` e.g. `9` for `DB4DBB9`. <br>- `0`: swing disabled<br>- `1`: swing enabled"
            },
            "get_WaterLevel": {
              "title": "get_WaterLevel **(optional)** **(push support)**",
              "type": "number",
              "description": "offset to get water level. S7 type `Real` e.g. `8` for `DB4DBD8`."
            },
            "get_CurrentPosition": {
              "title": "get_CurrentPosition **(push support)**",
              "type": "number",
              "description": "offset to get current position `0:closed 100:open` S7 type `Byte` e.g. `0` for `DB4DBB0`<br>- `0`: closed<br>- `in between`: partly open<br>- `100`: open"
            },
            "invertPosition": {
              "title": "invertPosition **(optional)**",
              "type": "boolean",
              "placeholder": false,
              "description": "set to `true` to inverts the values of current and target position from `0:closed 100:open` to `100:closed 0:open`"
            },
            "forceCurrentPosition": {
              "title": "forceCurrentPosition **(optional)**",
              "type": "boolean",
              "placeholder": false,
              "description": " when set to `true` the position set by `set_TargetPosition` is directly used as current position. By this it seems in tha home app as the target position was directly reached. This is recommended when not using `adaptivePolling` or pushing the value from the plc."
            },
            "mapGetCurrentPosition": {
              "title": "mapGetCurrentPosition **(optional)**",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "description": "define mapping array for get position. The PLC value is used as index into the table. e.g. `[0, 25, 100]` which maps the PLC value `0->0 1->25 2->100` this this is useful e.g. for window open state."
            },
            "get_TargetPosition": {
              "title": "get_TargetPosition **(optional)** **(push support)**",
              "type": "number",
              "description": "offset to get target position S7 type `Byte` e.g. `1` for `DB4DBB1` (can have same value as set_TargetPosition)<br>- `0`: closed<br>- `in between`: partly open<br>- `100`: open"
            },
            "set_TargetPosition": {
              "title": "set_TargetPosition **(optional)** **(control support)**",
              "type": "number",
              "description": "offset to set current position `0:closed 100:open` S7 type `Byte` e.g. `2` for `DB4DBB2` (can have same value as get_TargetPosition)<br>- `0`: closed<br>- `in between`: partly open<br>- `100`: open"
            },
            "get_PositionState": {
              "title": "get_PositionState **(optional)** **(push support)**",
              "type": "number",
              "description": "offset to current movement state if not defined fixed `2`is returned S7 type `Byte` e.g. `3` for `DB4DBB3`<br>- `0`: down<br>- `1`: up<br>- `2`: stop"
            },
            "set_HoldPosition": {
              "title": "set_HoldPosition **(optional)** **(control support)**",
              "type": "number",
              "description": "offset and bit set to 1 to stop movement. (Seems not to be used by HomeApp) when not defined writes will be ignoredS7 type `Bool` **PLC has to set to 0** e.g. `55.1` for `DB4DBX55.1`"
            },
            "get_OccupancyDetected": {
              "title": "get_OccupancyDetected **(push support)**",
              "type": "number",
              "description": "offset and bit get the current status S7 type `Bool` e.g. `55.0` for `DB4DBX55.0`<br>- `false`: no occupancy<br>- `true`: occupancy detected"
            },
            "invertOccupancy": {
              "title": "invertOccupancy",
              "type": "boolean",
              "placeholder": false,
              "description": "when enabled it inverts the logic of get_OccupancyDetected to <br>`false:motion detected` and `true:no motion`."
            },
            "get_MotionDetected": {
              "title": "get_MotionDetected **(push support)**",
              "type": "number",
              "description": "offset and bit get the current status S7 type `Bool` e.g. `55.0` for `DB4DBX55.0`<br>- `false`: no occupancy<br>- `true`: occupancy detected"
            },
            "invertMotionDetected": {
              "title": "invertMotionDetected",
              "type": "boolean",
              "placeholder": false,
              "description": "when enabled it inverts the logic of get_MotionDetected to <br>`false:closed` and `true:no motion`."
            },
            "get_ContactSensorState": {
              "title": "get_ContactSensorState **(push support)**",
              "type": "number",
              "description": "offset and bit get the current status S7 type `Bool` e.g. `55.0` for `DB4DBX55.0`<br>- `false`: closed<br>- `true`: open"
            },
            "invertContactSensorState": {
              "title": "invertContactSensorState",
              "type": "boolean",
              "placeholder": false,
              "description": "when enabled it inverts the logic of get_ContactSensorState to <br>`false:open` and `true:closed."
            },
            "get_LeakDetected": {
              "title": "get_LeakDetected **(push support)**",
              "type": "number",
              "description": "offset and bit get the current status S7 type `Bool` e.g. `55.0` for `DB4DBX55.0`<br>- `false`: no leak detected<br>- `true`: leak detected"
            },
            "invertLeakDetected": {
              "title": "invertLeakDetected",
              "type": "boolean",
              "placeholder": false,
              "description": "when enabled it inverts the logic of get_ContactSensorState to <br>`false:leak detected` and `true:no leak detected."
            },
            "get_SetDuration": {
              "title": "get_SetDuration **(push support)**",
              "type": "number",
              "description": "offset to get duration 0..3600 sec S7 type `Time` e.g. `10` for `DB4DBD10`"
            },
            "set_SetDuration": {
              "title": "set_SetDuration **(control support)**",
              "type": "number",
              "description": "offset to set duration 0..3600 sec S7 type `Time` e.g. `14` for `DB4DBD10`"
            },
            "get_RemainingDuration": {
              "title": "get_RemainingDuration **(push support)**",
              "type": "number",
              "description": "offset to get remaining duration 0..3600 sec S7 type `Time` e.g. `18` for `DB4DBD10`"
            },
            "get_CurrentAmbientLightLevel": {
              "title": "get_CurrentAmbientLightLevel **(push support)**",
              "type": "number",
              "description": "offset to get current illumination in LUX S7 type `Real` value limited to 0.0001 ~ 100,000   e.g. `55` for `DB4DBD55`"
            },
            "get_CurrentAmbientLightLevelDInt": {
              "title": "get_CurrentAmbientLightLevelDInt **(push support)**",
              "type": "number",
              "description":  "offset to get current illumination in LUX S7 type `DInt` value limited to 0.0001 ~ 100,000   e.g. `55` for `DB4DBD55`"
            },
            "get_SecuritySystemCurrentState": {
              "title": "get_SecuritySystemCurrentState **(push support)**",
              "type": "number",
              "description":  "offset to current security system state S7 type `Byte` e.g. `3` for `DB4DBB3` <br> - `0`: armed stay at home <br> - `1`: armed away from home <br> - `2`: armed night <br> - `3`: disarmed <br> - `4`: alarm triggered`"
            },
            "get_SecuritySystemTargetState": {
              "title": "get_SecuritySystemTargetState **(push support)**",
              "type": "number",
              "description":  "offset to set target security system state S7 type `Byte` e.g. `5` for `DB4DBB4` <br> - `0`: armed stay at home <br> - `1`: armed away from home <br> - `2`: armed night <br> - `3`: disarmed"
            },
            "set_SecuritySystemTargetState": {
              "title": "set_SecuritySystemTargetState **(control support)**",
              "type": "number",
              "description":  "ooffset to set target security system state S7 type `Byte` e.g. `6` for `DB4DBB6` <br> - `0`: armed stay at home <br> - `1`: armed away from home <br> - `2`: armed night <br> - `3`: disarmed"
            },
            "mapGetSecuritySystemCurrentState": {
              "title": "mapGetSecuritySystemCurrentState **(optional)**",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "description":  "define mapping array for get security system state. The PLC value is used as index into the table. e.g. `[3, 1]` which maps the PLC value `0->3 1->2` when the PLC supports only two states with `0:disarmed` and `1:armed` and `2:alarm`."
            },
            "mapSetSecuritySystemTargetState": {
              "title": "mapSetSecuritySystemTargetState **(optional)**",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "description":  "define mapping array for set security system state. The home app value is used as index into the table. e.g. `[1, 1, 1, 0, 2]` which maps the PLC value `0->1 1->1 2->1, 3->0, 4->2` when the PLC supports only two states with `0:disarmed` and `1:armed` and `2:alarm`."
            },
            "mapGetSecuritySystemTargetState": {
              "title": "mapGetSecuritySystemTargetState **(optional)**",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "description":  "define mapping array for get security system state. The PLC value is used as index into the table. e.g. `[3, 1]` which maps the PLC value `0->3 1->2` when the PLC supports only two states with `0:disarmed` and `1:armed` and `2:alarm`."
            },                        
            "isEvent": {
              "title": "isEvent **(optional)**",
              "type": "number",
              "description":  "ooffset and bit that is polled by homebridge-plc. **PLC has to set to `true`.** When `true` the event is read from `get_ProgrammableSwitchEvent` and set to `false` by homebirdge-plc to confirm that the event is handled. S7 type `Bool` e.g. `55.1` for `DB4DBX55.1` (polling only, not used for push)"
            },
            "get_LockCurrentState": {
              "title": "get_LockCurrentState **(push support)** **(push support)**",
              "type": "number",
              "description":  "offset to read current state current state S7 type `Bool` .g. `3.1` for `DB4DBB3`<br> - `false`: secured<br> - `true`: unsecured"
            },            
            "forceCurrentLockState": {
              "title": "forceCurrentLockState **(optional)**",
              "type": "boolean",
              "placeholder": false,
              "description":  "when set to `true` the state set by `set_LockTargetState` is directly used as current state. By this it seems in the home app as the target state was directly reached. This is recommended when not using `enablePolling` or pushing the value from the plc."
            },                  
            "get_LockTargetState": {
              "title": "get_LockTargetState **(push support)**",
              "type": "number",
              "description":  "offset to read current state current state S7 type `Byte` e.g. `3` for `DB4DBB3`<br> - `0`: unsecured<br> - `1`: secured<br> - `2`: jammed<br> - `3`: unknown"
            },
            "set_LockTargetState": {
              "title": "set_LockTargetState **(control support)**",
              "type": "number",
              "description":  "offset to write target state current state S7 type `Byte` e.g. `3` for `DB4DBB3`<br> - `0`: unsecured<br> - `1`: secured"
            },
            "get_LockCurrentStateBool": {
              "title": "get_LockCurrentStateBool **(push support)**",
              "type": "number",
              "description":  "offset to read current state current state S7 type `Bool` .g. `3.1` for `DB4DBB3`<br> - `false`: secured<br> - `true`: unsecured"
            },
            "invertLockState": {
              "title": "invertLockState **(optional)**",
              "type": "boolean",
              "description":  "when set to `true` all states are inverted (current and target state) `false`: **unsecured** and `true`: **secured**"
            },
            "get_LockTargetStateBool": {
              "title": "get_LockTargetStateBool **(push support)**",
              "type": "number",
              "description":  "offset to read target state current state S7 type `Bool` e.. `3.1` for `DB4DBB3`<br> - `false`: secured<br> - `true`: unsecured"
            },




            
            "set_LockTargetStateBool": {
              "title": "Single Bit mode: offset set_LockTargetStateBool **(control support)**",
              "type": "number",
              "description": "Soffset to write target state current state S7 type `Bool` e.g. `3.1` for `DB4DBB3`<br> - `false`: secured<br> - `true`: unsecured",
              "condition": {
                "functionBody": "return (!model.accessories[arrayIndices[0]].set_LockTargetStateBool_Secured && !model.accessories[arrayIndices[0]].set_LockTargetStateBool_Unsecured);"
              }
            },
            "set_LockTargetStateBool_Secured": {
              "title": "Separate Bits mode: offset set_LockTargetStateBool_Secured **(control support)**",
              "type": "number",
              "description": "offset and bit set to `true` when switching to target state secured S7 type `Bool` **PLC has to set to `false`** e.g. `3.3` for `DB4DBX55.1`",
              "condition": {
                "functionBody": "return (!model.accessories[arrayIndices[0]].set_LockTargetStateBool);"
              }
            },
            "set_LockTargetStateBool_Unsecured": {
              "title": "Separate Bits mode: offset set_LockTargetStateBool_Unsecured",
              "type": "number",
              "description": "offset and bit set to `true` when switching to target state unsecured S7 type `Bool` **PLC has to set to `false`** e.g. `3.4` for `DB4DBX55.2`",
              "condition": {
                "functionBody": "return (!model.accessories[arrayIndices[0]].set_LockTargetStateBool);"
              }
            },
            "get_CurrentDoorState": {
              "title": "get_CurrentDoorState **(push support)** **(push support)**",
              "type": "number",
              "description":  "offset to read current state current state S7 type `Byte` e.g. `3` for `DB4DBB3`<br> - `0`: open<br> - `1`: closed<br> - `2`: opening<br> - `3`: closing<br> - `4`: stopped"
            },            
            "forceCurrentDoorState": {
              "title": "forceCurrentDoorState **(optional)**",
              "type": "boolean",
              "placeholder": false,
              "description":  "when set to `true` the position set by `set_TargetDoorState` is directly used as current state. By this it seems in the home app as the target state was directly reached. This is recommended when not using `enablePolling` or pushing the value from the plc."
            },   
            "get_TargetDoorState": {
              "title": "get_TargetDoorState **(push support)**",
              "type": "number",
              "description":  "offset to read target state current state S7 type `Byte` e.g. `3` for `DB4DBB3`<br> - `0`: open<br> - `1`: closed"
            },
            "set_TargetDoorState": {
              "title": "set_TargetDoorState **(control support)**",
              "type": "number",
              "description":  "offset to write target state current state S7 type `Byte` e.g. `3` for `DB4DBB3`<br> - `0`: open<br> - `1`: closed"
            },            
            "get_SmokeDetected": {
              "title": "get_SmokeDetected **(push support)**",
              "type": "number",
              "description":  "**(push support)** offset and bit to smoke detection. S7 type `Bool` e.g. `55.1` for `DB4DBX55.1`<br> - `false`: ok<br> - `true`: smoke detected"
            },
            "get_CurrentFanState": {
              "title": "get_CurrentFanState **(optional)** **(push support)**",
              "type": "number",
              "description":  "**(push support)** offset to get current heating/cooling state S7 type `Byte` e.g. `8` for `DB4DBB8`.<br> - `0`: inactive<br> - `1`: idle<br> - `2`: blowing"
            },
            "default_CurrentFanState": {
              "title": "default_CurrentFanState **(optional)**",
              "type": "number",
              "description":  "defines alternative value thats returned then `get_CurrentFanState` is not defined. Default value `0:inactive"
            },
            "mapCurrentFanStateGet": {
              "title": "mapCurrentFanStateGet **(optional)**",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "description": "define mapping array for `get_CurrentFanState`. The PLC value is used as index into the table. e.g. `[0, 2]` which maps the PLC value `0->1 1->2` when the PLC supports only two states with `0:idle` and `1:blowing`."
            },
            "default_TargetFanState": {
              "title": "default_TargetFanState **(optional)**",
              "type": "number",
              "description":  "defines alternative value thats returned then `get_TargetFanState` is not defined. Default value `0:manual`<br> - `0`: manual<br> - `1`: automatic"
            },
            "get_TargetFanState": {
              "title": "get_TargetFanState **(push support)**",
              "type": "number",
              "description":  "offset to get target heating/cooling state. S7 type `Byte` e.g. `9` for `DB4DBB9`. When not defined fixed `1`: automatic is used."
            },
            "set_TargetFanState": {
              "title": "set_TargetFanState **(optional but required when `get_TargetFanState` is defined)** **(control support)**",
              "type": "number",
              "description":  "offset to get target heating/cooling state. S7 type `Byte` e.g. `9` for `DB4DBB9`. When not defined fixed `1`: automatic is used.<br> - `0`: manual<br> - `1`: automatic"
            },  
            "mapTargetFanStateGet": {
              "title": "mapTargetFanStateGet **(optional)** **(push support)**",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "description": "define mapping array for `get_TargetFanState`. The PLC value is used as index into the table. e.g. `[1, 0]` which maps the PLC value `0->1 1->0` when the PLC supports only two states with `0:automatic` and `1:manual`."
            },
            "mapTargetFanStateSet": {
              "title": "mapTargetFanStateSet **(optional)**",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "description": "The home app value is used as index into the table. e.g. `[1, 0]` which maps the PLC value `0->1 1->0` when the PLC supports only two states with `0:automatic` and `1:manual`."
            },
            "get_RotationSpeedByte": {
              "title": "get_RotationSpeedByte **(optional)** **(push support)**",
              "type": "number",
              "description": "offset to get rotation speed state S7 type `Byte` e.g. `8` for `DB4DBB8`.",
              "condition": {
                "functionBody": "return (!model.accessories[arrayIndices[0]].get_RotationSpeed && !model.accessories[arrayIndices[0]].set_RotationSpeed);"
              }
            },
            "set_RotationSpeedByte": {
              "title": "set_RotationSpeedByte **(optional but required when `set_RotationSpeedByte` is defined)** **(push support)**",
              "type": "number",
              "description": "offset to get set speed state. S7 type `Byte` e.g. `9` for `DB4DBB9`.",
              "condition": {
                "functionBody": "return (!model.accessories[arrayIndices[0]].get_RotationSpeed && !model.accessories[arrayIndices[0]].set_RotationSpeed);"
              }
            },

            "get_RotationSpeed": {
              "title": "get_RotationSpeed **(optional)** **(push support)**",
              "type": "number",
              "description": "offset to get rotation speed state S7 type `Real` e.g. `8` for `DB4DBB8`.",
              "condition": {
                "functionBody": "return (!model.accessories[arrayIndices[0]].get_RotationSpeedByte && !model.accessories[arrayIndices[0]].set_RotationSpeedByte);"
              }
            },
            "set_RotationSpeed": {
              "title": "set_RotationSpeed **(optional but required when `get_RotationSpeed` is defined)** **(push support)**",
              "type": "number",
              "description": "offset to get set speed state. S7 type `Real` e.g. `9` for `DB4DBB9`.",
              "condition": {
                "functionBody": "return (!model.accessories[arrayIndices[0]].get_RotationSpeedByte && !model.accessories[arrayIndices[0]].set_RotationSpeedByte);"
              }
            },                                                



            "get_RotationDirection": {
              "title": "get_RotationDirection **(optional)** **(push support)**",
              "type": "number",
              "description":  "offset to get rotation direction state. S7 type `Byte` e.g. `9` for `DB4DBB9`. When not defined fixed `0`: clockwise is used.<br>- `0`: clockwise<br>- `1`: counter clockwise"
            },
            "set_RotationDirection": {
              "title": "set_RotationDirection **(optional)** **(control support)**",
              "type": "number",
              "description":  "offset to set rotation directionstate. S7 type `Byte` e.g. `9` for `DB4DBB9`.<br> - `0`: clockwise<br> - `1`: counter clockwise"
            },  
            "mapRotationDirectionGet": {
              "title": "mapRotationDirectionGet **(optional)**",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "description": "define mapping array for `get_RotationDirection`. The PLC value is used as index into the table. e.g. `[1, 0]` inverts the direction"
            },
            "mapRotationDirectionSet": {
              "title": "mapRotationDirectionSet **(optional)**",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "description": "define mapping array for `set_RotationDirection`. The home app value is used as index into the table. e.g. `[1, 0]` inverts the direction"
            },
            "get_CurrentAirPurifierState": {
              "title": "get_CurrentAirPurifierState **(optional)** **(push support)**",
              "type": "number",
              "description":  "offset to get current heating/cooling state S7 type `Byte` e.g. `8` for `DB4DBB8`.<br> - `0`: inactive<br> - `1`: idle<br> - `2`: purifying air"
            },
            "default_CurrentAirPurifierState": {
              "title": "default_CurrentAirPurifierState **(optional)**",
              "type": "number",
              "description":  "defines alternative value thats returned then `get_CurrentAirPurifierState` is not defined. Default value `0:inactive"
            },
            "mapCurrentAirPurifierState": {
              "title": "mapCurrentAirPurifierState **(optional)**",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "description": "define mapping array for `get_CurrentFanState`. The PLC value is used as index into the table. e.g. `[0, 2]` which maps the PLC value `0->1 1->2` when the PLC supports only two states with `0:idle` and `1:blowing`."
            },
            "default_TargetAirPurifierState": {
              "title": "default_TargetAirPurifierState **(optional)**",
              "type": "number",
              "description":  "defines alternative value thats returned then `get_TargetAirPurifierState` is not defined. Default value `0:manual`<br> - `0`: manual<br> - `1`: automatic"
            },
            "get_TargetAirPurifierState": {
              "title": "get_TargetAirPurifierState **(optional)** **(push support)**",
              "type": "number",
              "description":  "offset to get target heating/cooling state. S7 type `Byte` e.g. `9` for `DB4DBB9`. When not defined fixed `1`: automatic is used.<br> - `0`: manual<br> - `1`: automatic"
            },
            "set_TargetAirPurifierState": {
              "title": "set_TargetAirPurifierState **(optional but required when `get_TargetAirPurifierState` is defined)** **(control support)**",
              "type": "number",
              "description":  "offset to get target heating/cooling state. S7 type `Byte` e.g. `9` for `DB4DBB9`. When not defined fixed `1`: automatic is used.<br> - `0`: manual<br> - `1`: automatic"
            },  
            "mapTargetAirPurifierStateGet": {
              "title": "mapTargetAirPurifierStateGet **(optional)**",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "description": "define mapping array for `get_TargetAirPurifierState`. The PLC value is used as index into the table. e.g. `[1, 0]` which maps the PLC value `0->1 1->0` when the PLC supports only two states with `0:automatic` and `1:manual`."
            },
            "mapTargetAirPurifierStateSet": {
              "title": "mapTargetAirPurifierStateSet **(optional)**",
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 0
              },
              "description": "define mapping array for `set_TargetAirPurifierState`. The home app value is used as index into the table. e.g. `[1, 0]` which maps the PLC value `0->1 1->0` when the PLC supports only two states with `0:automatic` and `1:manual`"
            },                                 
            "get_FilterChangeIndication": {
              "title": "get_FilterChangeIndication **(push support)**",
              "type": "number",
              "description":  "offset and bit to filter change indication S7 type `Bool` e.g. `55.3` for `DB4DBX55.3 <br> - `0`: filter ok<br> - `true`: change filter"
            },
            "get_FilterLifeLevel": {
              "title": "get_FilterLifeLevel **(optional)** **(push support)**",
              "type": "number",
              "description":  "offset and bit to filter live level S7 type `bate` e.g. `56` for `DB4DBX56<br> - `0`: change filter<br> - `100`: filter is new"
            },       
            "set_ResetFilterIndication": {
              "title": "set_ResetFilterIndication **(optional but required when `get_TargetAirPurifierState` is defined)** **(control support)**",
              "type": "number",
              "description":  "offset and bit to filter change indication S7 type `Bool` **PLC has to set to 0** after detecting change to true via homebridge e.g. `55.4` for `DB4DBX55.4"
            },
            "get_StatusLowBattery": {
              "title": "get_StatusLowBattery **(optional)** **(push support)**",
              "type": "number",
              "description":  "offset and bit to battery low detection. (Home app does not inform with push notification) S7 type `Bool` e.g. `55.3` for `DB4DBX55.3`<br> - `false`: ok<br> - `true`: battery low"
            },
            "get_StatusTampered": {
              "title": "get_StatusTampered **(optional)** **(push support)**",
              "type": "number",
              "description":  "offset and bit to tamper detection. (Home app shows this only within the options) S7 type `Bool` e.g. `55.2` for `DB4DBX55.2`<br> - `false`: ok<br> - `true`: tampered"
            }
          }
        }
      }
    }
  },
  "layout": [
    {
      "type": "section",
      "title": "PLC connection",
      "expandable": true,
      "expanded": false,
      "orderable": false,
      "items": [
        "ip",
        "rack",
        "slot",
        "communicationOP"
      ]
    },
    {
      "type": "section",
      "title": "Polling",
      "expandable": true,
      "expanded": false,
      "orderable": false,
      "items": [
        "enablePolling",
        "defaultPollInterval",
        "distributePolling",
        "adaptivePolling",
        "adaptivePollingInterval"
      ]
    },
    {
      "type": "section",
      "title": "Advanced",
      "expandable": true,
      "expanded": false,
      "orderable": false,
      "items": [
        "enablePush",
        "enableControl",
        "port",
        "forward",
        "mirror"
      ]
    },
    {
      "type": "section",
      "title": "Accessories",
      "expandable": true,
      "expanded": true,
      "items": [
        {
          "key": "accessories",
          "type": "tabarray",
          "title": "{{ value.name || 'new Accessory' }}",
          "items": [
            "accessories[].accessory",
            "accessories[].name",
            "accessories[].db",
            "accessories[].manufacturer",
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Polling mode",
              "expandable": true,
              "expanded": false,
              "items": ["accessories[].enablePolling", "accessories[].pollInterval"]
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "On/Off",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_On",
                "accessories[].set_On",
                "accessories[].set_On_Set",
                "accessories[].set_On_Reset"
              ],
              "condition": {
                "functionBody": "return ['PLC_LightBulb','PLC_Outlet','PLC_Switch'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Active",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_Active",
                "accessories[].set_Active",
                "accessories[].set_Active_Set",
                "accessories[].set_Active_Reset"
              ],
              "condition": {
                "functionBody": "return ['PLC_HumidifierDehumidifier','PLC_Faucet','PLC_Valve','PLC_Fan','PLC_AirPurifier'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Brightness",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_Brightness",
                "accessories[].set_Brightness",
                "accessories[].minBrightnessValue",
                "accessories[].maxBrightnessValue",
                "accessories[].minBrightnessStep"
              ],
              "condition": {
                "functionBody": "return ['PLC_LightBulb'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },

            {
              "key": "accessories[]",
              "type": "section",
              "title": "Target Temperature",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_TargetTemperature",
                "accessories[].set_TargetTemperature",
                "accessories[].minTargetTemperatureValue",
                "accessories[].maxTargetTemperatureValue",
                "accessories[].minTargetTemperatureStep"
              ],
              "condition": {
                "functionBody": "return ['PLC_Thermostat'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Target Relative Humidity",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_TargetRelativeHumidity",
                "accessories[].set_TargetRelativeHumidity",
                "accessories[].minTargetHumidityValue",
                "accessories[].maxTargetHumidityValue",
                "accessories[].minTargetHumidityStep"
              ],
              "condition": {
                "functionBody": "return ['PLC_Thermostat'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Temperature sensor",
              "expandable": true,
              "expanded": false,
              "items": ["accessories[].get_CurrentTemperature", "accessories[].minTemperatureValue", "accessories[].maxTemperatureValue", "accessories[].minTemperatureStep"],
              "condition": {
                "functionBody": "return ['PLC_TemperatureSensor','PLC_Thermostat'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Humidity sensor",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_CurrentRelativeHumidity",
                "accessories[].minHumidityValue",
                "accessories[].maxHumidityValue",
                "accessories[].minHumidityStep"
              ],
              "condition": {
                "functionBody": "return ['PLC_HumiditySensor','PLC_Thermostat'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Status",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_StatusTampered",
                "accessories[].get_StatusLowBattery"
              ],
              "condition": {
                "functionBody": "return ['PLC_TemperatureSensor','PLC_HumiditySensor','PLC_Thermostat'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Current Heating Cooling State",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_CurrentHeatingCoolingState",
                "accessories[].mapGetCurrentHeatingCoolingState"
              ],
              "condition": {
                "functionBody": "return ['PLC_Thermostat'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Target Heating Cooling State",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_TargetHeatingCoolingState",
                "accessories[].set_TargetHeatingCoolingState",
                "accessories[].mapSetTargetHeatingCoolingState",
                "accessories[].mapGetTargetHeatingCoolingState"
              ],
              "condition": {
                "functionBody": "return ['PLC_Thermostat'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Humidifier/Dehumidifier State",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_CurrentHumidifierDehumidifierState",
                "accessories[].get_TargetHumidifierDehumidifierState",
                "accessories[].set_TargetHumidifierDehumidifierState",
                "accessories[].default_TargetHumidifierDehumidifierState",
                "accessories[].mapGetCurrentHumidifierDehumidifierState",
                "accessories[].mapGetTargetHumidifierDehumidifierState",
                "accessories[].mapSetTargetHumidifierDehumidifierState"
              ],
              "condition": {
                "functionBody": "return ['PLC_HumidifierDehumidifier'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Rotation speed (PLC type Real)",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_RotationSpeed",
                "accessories[].set_RotationSpeed"
              ],
              "condition": {
                "functionBody": "return ['PLC_HumidifierDehumidifier','PLC_Fan','PLC_AirPurifier'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Rotation speed (PLC type Byte)",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_RotationSpeedByte",
                "accessories[].set_RotationSpeedByte"
              ],
              "condition": {
                "functionBody": "return ['PLC_HumidifierDehumidifier','PLC_Fan','PLC_AirPurifier'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Swing mode",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_SwingMode",
                "accessories[].set_SwingMode"
              ],
              "condition": {
                "functionBody": "return ['PLC_HumidifierDehumidifier','PLC_AirPurifier'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Water level",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_WaterLevel"
              ],
              "condition": {
                "functionBody": "return ['PLC_HumidifierDehumidifier'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Current position",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_CurrentPosition",
                "accessories[].get_PositionState",
                "accessories[].invertPosition",
                "accessories[].mapGetCurrentPosition"
              ],
              "condition": {
                "functionBody": "return ['PLC_WindowCovering','PLC_Window','PLC_Door'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Target position",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_TargetPosition",
                "accessories[].set_TargetPosition",
                "accessories[].set_HoldPosition",
                "accessories[].forceCurrentPosition"
              ],
              "condition": {
                "functionBody": "return ['PLC_WindowCovering','PLC_Window','PLC_Door'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Occupancy",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_OccupancyDetected",
                "accessories[].invertOccupancy"
              ],
              "condition": {
                "functionBody": "return ['PLC_OccupancySensor'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Motion",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_MotionDetected",
                "accessories[].invertMotionDetected"
              ],
              "condition": {
                "functionBody": "return ['PLC_MotionSensor'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "ContactSensorState",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_ContactSensorState",
                "accessories[].invertContactSensorState"
              ],
              "condition": {
                "functionBody": "return ['PLC_ContactSensor'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Duration",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_SetDuration",
                "accessories[].set_SetDuration",
                "accessories[].get_RemainingDuration"
              ],
              "condition": {
                "functionBody": "return ['PLC_Valve'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "SecuritySystemCurrentState",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_SecuritySystemCurrentState",
                "accessories[].set_SetDuration",
                "accessories[].mapGetSecuritySystemCurrentState"
              ],
              "condition": {
                "functionBody": "return ['PLC_SecuritySystem'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "SecuritySystemTargetState",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].set_SecuritySystemTargetState",
                "accessories[].get_SecuritySystemTargetState",
                "accessories[].mapSetSecuritySystemTargetState",
                "accessories[].mapGetSecuritySystemTargetState"
              ],
              "condition": {
                "functionBody": "return ['PLC_SecuritySystem'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "ProgrammableSwitchEvent",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].isEvent",
                "accessories[].get_ProgrammableSwitchEvent"
              ],
              "condition": {
                "functionBody": "return ['PLC_StatelessProgrammableSwitch'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "LockCurrentState",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_LockCurrentState",
                "accessories[].forceCurrentLockState"
              ],
              "condition": {
                "functionBody": "return ['PLC_LockMechanism'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "LockTargetState",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_LockTargetState",
                "accessories[].set_LockTargetState"
              ],
              "condition": {
                "functionBody": "return ['PLC_LockMechanism'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "LockCurrentState",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_LockCurrentStateBool",
                "accessories[].forceCurrentLockState",
                "accessories[].invertLockState"
              ],
              "condition": {
                "functionBody": "return ['PLC_LockMechanismBool'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },           
            {
              "key": "accessories[]",
              "type": "section",
              "title": "LockTargetState",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_LockTargetStateBool",
                "accessories[].set_LockTargetStateBool",
                "accessories[].set_LockTargetStateBool_Secured",
                "accessories[].set_LockTargetStateBool_Unsecured"
              ],
              "condition": {
                "functionBody": "return ['PLC_LockMechanismBool'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "CurrentDoorState",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_CurrentDoorState",
                "accessories[].forceCurrentDoorState"
              ],
              "condition": {
                "functionBody": "return ['PLC_GarageDoorOpener'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "TargetDoorState",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_TargetDoorState",
                "accessories[].set_TargetDoorState"
              ],
              "condition": {
                "functionBody": "return ['PLC_GarageDoorOpener'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "SmokeDetected",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_SmokeDetected"
              ],
              "condition": {
                "functionBody": "return ['PLC_SmokeSensor'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "CurrentAmbientLightLevel",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_CurrentAmbientLightLevel"
              ],
              "condition": {
                "functionBody": "return ['PLC_LightSensor'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "CurrentAmbientLightLevel",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_CurrentAmbientLightLevelDInt"
              ],
              "condition": {
                "functionBody": "return ['PLC_LightSensor_DInt'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "CurrentFanState",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_CurrentFanState",
                "accessories[].default_CurrentFanState",
                "accessories[].mapCurrentFanStateGet"
              ],
              "condition": {
                "functionBody": "return ['PLC_Fan'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "TargetFanState",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].default_TargetFanState",
                "accessories[].get_TargetFanState",
                "accessories[].set_TargetFanState",
                "accessories[].mapTargetFanStateGet",
                "accessories[].mapTargetFanStateSet"
              ],
              "condition": {
                "functionBody": "return ['PLC_Fan'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "Direction",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_RotationDirection",
                "accessories[].set_RotationDirection",
                "accessories[].mapRotationDirectionGet",
                "accessories[].mapRotationDirectionSet"
              ],
              "condition": {
                "functionBody": "return ['PLC_Fan'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "CurrentAirPurifierState",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_CurrentAirPurifierState",
                "accessories[].default_CurrentAirPurifierState",
                "accessories[].mapCurrentAirPurifierState"
              ],
              "condition": {
                "functionBody": "return ['PLC_AirPurifier'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "TargetAirPurifierState",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_TargetAirPurifierState",
                "accessories[].set_TargetAirPurifierState",
                "accessories[].mapTargetAirPurifierStateGet",
                "accessories[].mapTargetAirPurifierStateSet"
              ],
              "condition": {
                "functionBody": "return ['PLC_AirPurifier'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "FilterChangeIndication",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_FilterChangeIndication",
                "accessories[].set_ResetFilterIndication"
              ],
              "condition": {
                "functionBody": "return ['PLC_FilterMaintenance','PLC_AirPurifier'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            },
            {
              "key": "accessories[]",
              "type": "section",
              "title": "FilterLifeLevel",
              "expandable": true,
              "expanded": false,
              "items": [
                "accessories[].get_FilterLifeLevel"
              ],
              "condition": {
                "functionBody": "return ['PLC_FilterMaintenance','PLC_AirPurifier'].includes(model.accessories[arrayIndices[0]].accessory);"
              }
            }
          ]
        }
      ]
    }
  ]
}
